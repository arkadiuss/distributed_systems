# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `IotController.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module IotController
_M_IotController = Ice.openModule('IotController')
__name__ = 'IotController'

if 'DeviceState' not in _M_IotController.__dict__:
    _M_IotController.DeviceState = Ice.createTempClass()
    class DeviceState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceState.ON = DeviceState("ON", 0)
    DeviceState.OFF = DeviceState("OFF", 1)
    DeviceState._enumerators = { 0:DeviceState.ON, 1:DeviceState.OFF }

    _M_IotController._t_DeviceState = IcePy.defineEnum('::IotController::DeviceState', DeviceState, (), DeviceState._enumerators)

    _M_IotController.DeviceState = DeviceState
    del DeviceState

if 'DeviceInfo' not in _M_IotController.__dict__:
    _M_IotController.DeviceInfo = Ice.createTempClass()
    class DeviceInfo(object):
        def __init__(self, id=0, name='', state=_M_IotController.DeviceState.ON):
            self.id = id
            self.name = name
            self.state = state

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.state)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_IotController.DeviceInfo):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.state is None or other.state is None:
                    if self.state != other.state:
                        return (-1 if self.state is None else 1)
                else:
                    if self.state < other.state:
                        return -1
                    elif self.state > other.state:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_IotController._t_DeviceInfo)

        __repr__ = __str__

    _M_IotController._t_DeviceInfo = IcePy.defineStruct('::IotController::DeviceInfo', DeviceInfo, (), (
        ('id', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('state', (), _M_IotController._t_DeviceState)
    ))

    _M_IotController.DeviceInfo = DeviceInfo
    del DeviceInfo

if 'ArgumentException' not in _M_IotController.__dict__:
    _M_IotController.ArgumentException = Ice.createTempClass()
    class ArgumentException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IotController::ArgumentException'

    _M_IotController._t_ArgumentException = IcePy.defineException('::IotController::ArgumentException', ArgumentException, (), False, None, ())
    ArgumentException._ice_type = _M_IotController._t_ArgumentException

    _M_IotController.ArgumentException = ArgumentException
    del ArgumentException

_M_IotController._t_Device = IcePy.defineValue('::IotController::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_IotController.__dict__:
    _M_IotController.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getInfo(self, context=None):
            return _M_IotController.Device._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_IotController.Device._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IotController.Device._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_IotController.Device._op_getInfo.end(self, _r)

        def turnOn(self, context=None):
            return _M_IotController.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_IotController.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IotController.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_IotController.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_IotController.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_IotController.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IotController.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_IotController.Device._op_turnOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IotController.DevicePrx.ice_checkedCast(proxy, '::IotController::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IotController.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IotController::Device'
    _M_IotController._t_DevicePrx = IcePy.defineProxy('::IotController::Device', DevicePrx)

    _M_IotController.DevicePrx = DevicePrx
    del DevicePrx

    _M_IotController.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotController::Device')

        def ice_id(self, current=None):
            return '::IotController::Device'

        @staticmethod
        def ice_staticId():
            return '::IotController::Device'

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IotController._t_DeviceDisp)

        __repr__ = __str__

    _M_IotController._t_DeviceDisp = IcePy.defineClass('::IotController::Device', Device, (), None, ())
    Device._ice_type = _M_IotController._t_DeviceDisp

    Device._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IotController._t_DeviceInfo, False, 0), ())
    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IotController.Device = Device
    del Device

_M_IotController._t_Radio = IcePy.defineValue('::IotController::Radio', Ice.Value, -1, (), False, True, None, ())

if 'RadioPrx' not in _M_IotController.__dict__:
    _M_IotController.RadioPrx = Ice.createTempClass()
    class RadioPrx(_M_IotController.DevicePrx):

        def setVolume(self, vol, context=None):
            return _M_IotController.Radio._op_setVolume.invoke(self, ((vol, ), context))

        def setVolumeAsync(self, vol, context=None):
            return _M_IotController.Radio._op_setVolume.invokeAsync(self, ((vol, ), context))

        def begin_setVolume(self, vol, _response=None, _ex=None, _sent=None, context=None):
            return _M_IotController.Radio._op_setVolume.begin(self, ((vol, ), _response, _ex, _sent, context))

        def end_setVolume(self, _r):
            return _M_IotController.Radio._op_setVolume.end(self, _r)

        def setFrequency(self, freq, context=None):
            return _M_IotController.Radio._op_setFrequency.invoke(self, ((freq, ), context))

        def setFrequencyAsync(self, freq, context=None):
            return _M_IotController.Radio._op_setFrequency.invokeAsync(self, ((freq, ), context))

        def begin_setFrequency(self, freq, _response=None, _ex=None, _sent=None, context=None):
            return _M_IotController.Radio._op_setFrequency.begin(self, ((freq, ), _response, _ex, _sent, context))

        def end_setFrequency(self, _r):
            return _M_IotController.Radio._op_setFrequency.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IotController.RadioPrx.ice_checkedCast(proxy, '::IotController::Radio', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IotController.RadioPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IotController::Radio'
    _M_IotController._t_RadioPrx = IcePy.defineProxy('::IotController::Radio', RadioPrx)

    _M_IotController.RadioPrx = RadioPrx
    del RadioPrx

    _M_IotController.Radio = Ice.createTempClass()
    class Radio(_M_IotController.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotController::Device', '::IotController::Radio')

        def ice_id(self, current=None):
            return '::IotController::Radio'

        @staticmethod
        def ice_staticId():
            return '::IotController::Radio'

        def setVolume(self, vol, current=None):
            raise NotImplementedError("servant method 'setVolume' not implemented")

        def setFrequency(self, freq, current=None):
            raise NotImplementedError("servant method 'setFrequency' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IotController._t_RadioDisp)

        __repr__ = __str__

    _M_IotController._t_RadioDisp = IcePy.defineClass('::IotController::Radio', Radio, (), None, (_M_IotController._t_DeviceDisp,))
    Radio._ice_type = _M_IotController._t_RadioDisp

    Radio._op_setVolume = IcePy.Operation('setVolume', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_IotController._t_ArgumentException,))
    Radio._op_setFrequency = IcePy.Operation('setFrequency', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, (_M_IotController._t_ArgumentException,))

    _M_IotController.Radio = Radio
    del Radio

_M_IotController._t_Fridge = IcePy.defineValue('::IotController::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_IotController.__dict__:
    _M_IotController.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_IotController.DevicePrx):

        def setTemp(self, temp, context=None):
            return _M_IotController.Fridge._op_setTemp.invoke(self, ((temp, ), context))

        def setTempAsync(self, temp, context=None):
            return _M_IotController.Fridge._op_setTemp.invokeAsync(self, ((temp, ), context))

        def begin_setTemp(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_IotController.Fridge._op_setTemp.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setTemp(self, _r):
            return _M_IotController.Fridge._op_setTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IotController.FridgePrx.ice_checkedCast(proxy, '::IotController::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IotController.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IotController::Fridge'
    _M_IotController._t_FridgePrx = IcePy.defineProxy('::IotController::Fridge', FridgePrx)

    _M_IotController.FridgePrx = FridgePrx
    del FridgePrx

    _M_IotController.Fridge = Ice.createTempClass()
    class Fridge(_M_IotController.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IotController::Device', '::IotController::Fridge')

        def ice_id(self, current=None):
            return '::IotController::Fridge'

        @staticmethod
        def ice_staticId():
            return '::IotController::Fridge'

        def setTemp(self, temp, current=None):
            raise NotImplementedError("servant method 'setTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IotController._t_FridgeDisp)

        __repr__ = __str__

    _M_IotController._t_FridgeDisp = IcePy.defineClass('::IotController::Fridge', Fridge, (), None, (_M_IotController._t_DeviceDisp,))
    Fridge._ice_type = _M_IotController._t_FridgeDisp

    Fridge._op_setTemp = IcePy.Operation('setTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_double, False, 0),), (), None, (_M_IotController._t_ArgumentException,))

    _M_IotController.Fridge = Fridge
    del Fridge

# End of module IotController
